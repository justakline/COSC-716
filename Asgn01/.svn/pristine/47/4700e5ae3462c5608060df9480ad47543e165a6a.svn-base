import java.util.*;

/**
 * Manages a collection of Product orders and provides operations to add, remove,
 * persist, and present them. This class contains simple business logic for
 * handling an in-memory order list and demonstrates basic persistence and output.
 */
class OrderProcessor {
    
    private final OrderRepository orderRepository;
    private final OrderViewer orderViewer;
    private final DatabaseService databaseService;

    public OrderProcessor(String databaseTarget){
        orderRepository = new OrderRepository();
        orderViewer = new OrderViewer();
        databaseService = new DatabaseService(databaseTarget);
    }

    /**
     * Adds a product to the current collection of orders.
     *
     * @param product the Product to insert into the orders list
     */
    public void addOrder(Product product) {
        // Append the given Product to the end of the orders list.
        orderRepository.addOrder(product);
    }

    /**
     * Removes a product from the current collection of orders.
     * If the product is not found, no change occurs.
     *
     * @param product the Product to remove from the orders list
     */
    public void removeOrder(Product product) {
        // Remove the first occurrence of the given Product from the orders list.
        orderRepository.removeOrder(product);
    }


    /**
     * Simulates saving all current orders to a database by printing SQL INSERT statements.
     * Displays a connection message and then an INSERT line per product.
     */
    public void saveOrdersToDatabase() {
        // Fake database save
        databaseService.saveOrdersToDatabase(orderRepository.getOrders());
    }


    /**
     * Prints a formatted invoice for all current orders to the standard output.
     * Each product is listed with its name, retail cost, and wholesale cost.
     * The invoice includes a header and footer for the invoice.
     */
    public void printRetailInvoice() {
        orderViewer.printRetailInvoice(orderRepository.getOrders());
    }


    /**
     * Prints a formatted invoice for all current orders to the standard output.
     * Each product is listed with its name, retail cost, and wholesale cost.
     * The invoice includes a header and footer for the invoice.
     */
    public void printWholesalerInvoice() {
         orderViewer.printWholesalerInvoice(orderRepository.getOrders());
    }
}
